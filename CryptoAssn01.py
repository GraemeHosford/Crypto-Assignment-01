# Name: Graeme Hosford
# Student ID: R00147327

from binascii import unhexlify

cyphertexts = [
    "4F58904A22CEA7704419666992030BDA1B921B70127D473D14CD3421E10B0D12049BA4B68D008AC8D4ED19008CF2E918FF1745B01A3F48DDDCDD0B28450313",
    "4F5890183386AB230D0B6664DB070CC356891D311529482A16C12866A613071340D4B7ADDF498A8DDBB90F0181F0BA4BFE1602E0103409CF998D072E160D5D0D1633F22E7BABB57E2231671B",
    "5243D54C2F8FBA231D173325920A43C849891D6546324F780FCD6662E909010F43D4B3A3CE02D98EDABF4A0A94F0A74BE71650F5582310DD9FD902231618150C5F26F5266C",
    "5A43D54B2F81B96D4419246A8D0143C74FC6047E13314D7816C92D64A605480D4B9AB6E2D900948D95B9054F80E7AC0AE15956F81D660BD58CC50B28",
    "5355D55C2E9DBA6A0A1B3269824410CF52825365097D4B3403DE2321E70A0C414587F1B5C8499884D9ED01018DE2E91FE55940FC19300D9C91C80F34454C09065F37F83E6FA8FB",
    "5A109751358AEE6A0A58326D9E440BCF55825378157D5E3710DC2E21F21307414D9AF1B6C50CD98AC0BE024F8DE7E918E55956F81D661BDD85C4003D160B120C0C",
    "4F589018349AAF7110582963DB100BCB1B95167F1238473B07882967F2010641479BBFB6CC00979B95AC4A1B8AF0E904F85951FF583200D9858D1D3B4F",
    "4C55D55C2880BA230A1D2361DB0A0C8E5E820672072940370C883164A600070F50D4BFA7C80DD986DAED1E078DE0AE03FE5941FF16321AD3908D003516081C1B1475E72A7BADBA796F",
    "4C5187183086AF7744113525921043C95489173100325B7803CA356EEA111C04488DF1ACC21D9181DBAA4A1C83ECE902FE5943F7192F06",
    "52109455679AA666441D2162DB0902C01B921B741F7D482A07883269E3440D0643D4BCA3C349B0C8D4A04A1B8AF0E91CEB1550E50B",
    "585F985D6781A023051622258F0508CB1B9F1C64147D4B3D11DC6672EE0B1C414891A5E2C00CD99BD0A84A188AF4BD4BF31657E61D660FD388",
    "4B58904F6788A17144196668920A16DA5EC60779032F4C782B882A6EF510480C5D87B4AECB49B0C8D9A2191BC2F8B018EF1544B013271AD19D8D1E355A051E0C",
    "1B51D54B378FAD66441932258F0C068E48921263127D413D0ED83521F20C0D414686B4A3C600978F95AA054F86FABE05AA0D4AF558241AD99DC60734514C1A065F31FB3C67",
    "5F5F901826CEAA66010A6664DB0206C35A8A163102384C2A42DA2778A6054805569BA1E2C20FD98FDAA10E0A8CB5BA1EE4594FF5582748D29DC00B7A5F4C1E081339B42670BDBE6664",
    "4845984C2F87A0230D166671930143D95A9F53620E3809350DDE2372A6051C155695B2B6DE49948D95A1030487B5A704AA1656F81D3448D588DE4E2E44191849"
]

to_decrypt = "4F5890182280A764091966729A1743C75590167F12384D7800D16672E50C01134691A4B18D1A96C8DCB94A1883"


def xor_strings(s1: str, s2: str):
    s1_ord = []
    s2_ord = []
    res = []

    if len(s1) < len(s2):
        s2 = s2[:len(s1)]
    else:
        s1 = s1[:len(s2)]

    for i in range(len(s1)):
        s1_ord += [ord(s1[i])]
        s2_ord += [ord(s2[i])]

        xor = s1_ord[i] ^ s2_ord[i]

        # Check within bounds of ASCII uppercase letters
        if 65 <= xor <= 90:
            res += [xor]
        else:
            # 63 == The ASCII character for a question mark. Using this to fill in empty spaces in output
            res += [63]

    print("Result Ordinal")
    restext = ""
    for r in res:
        # Adding an extra space just for formatting
        restext += chr(r) + "  "
        print("%d, " % r, end="")

    print("\n")

    return restext


def main():
    xor_results = []

    main_cipher = str(unhexlify(to_decrypt), "latin_1")

    for c in cyphertexts:
        res = xor_strings(main_cipher, str(unhexlify(c), "latin_1"))
        xor_results.append(res)

    for x in xor_results:
        print("\n", x)


main()
